2024-01-15 02:13:37,905 - root - INFO - Building Model ...
2024-01-15 02:13:37,910 - root - INFO - Start Training ...
2024-01-15 02:13:38,207 - root - INFO - Start Training: Epoch 1
{'testId': tensor([[ 762,  762,  762,  ...,  347,  347,  347],
        [ 918,  918,  918,  ...,  364,  364,  364],
        [ 776,  776,  782,  ...,  136,  136,  136],
        ...,
        [1309, 1309, 1309,  ..., 1313, 1313, 1313],
        [ 927,  927,  927,  ...,  925,  925,  925],
        [ 563,  563,  563,  ...,  569,  569,  569]], dtype=torch.int32), 'assessmentItemID': tensor([[3975, 3976, 3977,  ..., 1791, 1792, 1793],
        [4986, 4987, 4988,  ..., 1882, 1883, 1884],
        [4056, 4057, 4085,  ...,  694,  695,  696],
        ...,
        [7763, 7764, 7758,  ..., 7795, 7796, 7797],
        [5048, 5049, 5050,  ..., 5035, 5036, 5037],
        [2936, 2937, 2938,  ..., 2965, 2966, 2967]], dtype=torch.int32), 'KnowledgeTag': tensor([[233, 233, 233,  ..., 750, 750, 750],
        [365, 365, 487,  ..., 756, 756, 756],
        [238, 238, 239,  ..., 589, 589, 589],
        ...,
        [850, 848, 847,  ..., 844, 846, 695],
        [367, 367, 367,  ..., 375, 375, 375],
        [170, 170, 170,  ..., 172, 172, 172]], dtype=torch.int32), 'elapsed': tensor([[         12,          61,          17,  ...,          54,
                  71, -2147483648],
        [         20,          10,         138,  ...,         121,
                 175, -2147483648],
        [         60,          60,          13,  ...,          34,
                  31, -2147483648],
        ...,
        [         92,         168,         164,  ...,          48,
                 168, -2147483648],
        [         19,          57,          56,  ...,          50,
                  28, -2147483648],
        [         17,          54,          45,  ...,          16,
                  18, -2147483648]], dtype=torch.int32), 'KnowledgeTag_percent': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], dtype=torch.int32), 'cumulative': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], dtype=torch.int32), 'paper_number': tensor([[2, 3, 4,  ..., 4, 5, 6],
        [4, 5, 6,  ..., 3, 4, 5],
        [4, 5, 1,  ..., 3, 4, 5],
        ...,
        [6, 7, 1,  ..., 6, 7, 8],
        [4, 5, 6,  ..., 5, 6, 7],
        [1, 2, 3,  ..., 3, 4, 5]], dtype=torch.int32), 'answerCode': tensor([[1, 1, 0,  ..., 1, 0, 1],
        [0, 1, 0,  ..., 1, 0, 0],
        [1, 0, 1,  ..., 1, 0, 1],
        ...,
        [1, 1, 1,  ..., 0, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1]], dtype=torch.int32), 'mask': tensor([[1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1],
        ...,
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1],
        [1, 1, 1,  ..., 1, 1, 1]], dtype=torch.int32), 'interaction': tensor([[0, 2, 2,  ..., 2, 2, 1],
        [0, 1, 2,  ..., 2, 2, 1],
        [0, 2, 1,  ..., 2, 2, 1],
        ...,
        [0, 2, 2,  ..., 2, 1, 2],
        [0, 2, 2,  ..., 2, 2, 2],
        [0, 2, 2,  ..., 2, 2, 2]], dtype=torch.int32)}
Traceback (most recent call last):
  File "/opt/ml/input/code/dkt/train.py", line 43, in <module>
    main(args) # main함수 실행 -> 학습!!!!!!!!!!!
  File "/opt/ml/input/code/dkt/train.py", line 36, in main
    trainer.run(args=args, train_data=train_data, valid_data=valid_data, model=model)
  File "/opt/ml/input/code/dkt/dkt/trainer.py", line 43, in run
    train_auc, train_acc, train_loss = train(train_loader=train_loader,
  File "/opt/ml/input/code/dkt/dkt/trainer.py", line 93, in train
    preds = model(batch) # '**'를 사용하기 위해 parameter와 argument의 쌍이 같아햐 하는데 lstm에서 paramete는 data하나기 때문에 '**'안씀
  File "/opt/ml/miniconda3/envs/dkt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/ml/miniconda3/envs/dkt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/ml/input/code/dkt/dkt/model.py", line 82, in forward
    X, batch_size = super().forward(data) # super().forward은 부모객체의 forward메소드를 말함
  File "/opt/ml/input/code/dkt/dkt/model.py", line 51, in forward
    value =  data[self.args.cat_cols]
TypeError: unhashable type: 'list'